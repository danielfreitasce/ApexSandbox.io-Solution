public List<Account> getAccounts(List<Account> accounts) {
    
    AccountWrapper[] accList = new List<AccountWrapper>();
    accList.addAll((List<AccountWrapper>) accounts);
    accList.sort(); 
    return accList; 

}
// write extra class here 
public class AccountWrapper implements Comparable {

    public Account accW;
    
    // Constructor
    public AccountWrapper(Account acc) {
    	// Guard against wrapping a null 
    	if(acc == null) {
    		Exception ex = new NullPointerException();
    		ex.setMessage('Account argument cannot be null'); 
    		throw ex;
    	}
        accW = acc;
    }

    // Compare accounts based on the account AnnualRevenue .
    public Integer compareTo(Object compareTo) {
        // Cast argument to AccountWrapper
        AccountWrapper compareToAccW = (AccountWrapper)compareTo;
        
        // The return value of 0 indicates that both elements are equal.
        Integer returnValue = 0;
        if ((accW.AnnualRevenue == null) && (compareToAccW.accW.AnnualRevenue == null)) {
            // both wrappers have null AnnualRevenues
            returnValue = 0;
        } else if ((accW.AnnualRevenue == null) && (compareToAccW.accW.AnnualRevenue != null)){
             
            returnValue = 1;
        } else if ((accW.AnnualRevenue != null) && (compareToAccW.accW.AnnualRevenue == null)){
            
            returnValue = -1;
        } else if (accW.AnnualRevenue > compareToAccW.accW.AnnualRevenue) {
 
            returnValue = -1;
        } else if (accW.AnnualRevenue < compareToAccW.accW.AnnualRevenue) {
 
            returnValue = 1;
        } 
        return returnValue;
    }

}